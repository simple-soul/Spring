<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--启用spring基于annotation的DI-->
    <context:annotation-config></context:annotation-config>

    <!--aop扫描，将Controller除外-->
    <context:component-scan base-package="com.kotlin">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--IOC-->

    <!-- 使用无参构造实现bean的创建 -->
    <!--<bean id="user" class="com.kotlin.Bean.User"></bean>-->

    <!-- 用包级函数实现静态工厂方式构建bean -->
    <!--<bean id="bean" class="com.kotlin.utils.UserFactoryKt" factory-method="getUser"></bean>-->
    <!-- 用伴生对象实现静态工厂方式构建bean -->
    <!--<bean id="bean2" class="com.kotlin.utils.UserFactory" factory-method="getUser"></bean>-->

    <!-- 使用实例工厂创建bean对象 -->
    <!-- 首先创建工厂对象 -->
    <!--<bean id="userFactory" class="com.kotlin.utils.UserFactory"></bean>-->
    <!--<bean id="bean3" factory-bean="userFactory" factory-method="getUser2"></bean>-->

    <!--有参构造注入属性值-->
    <!--<bean id="user" class="com.kotlin.Bean.User">-->
        <!--&lt;!&ndash;配置属性值&ndash;&gt;-->
        <!--<constructor-arg name="name" value="tom"/>-->
        <!--<constructor-arg name="age" value="35"/>-->
    <!--</bean>-->

    <!--set方法注入-->
    <!--<bean id="user2" class="com.kotlin.Bean.User">-->
        <!--<property name="name" value="barry"/>-->
        <!--<property name="age" value="23"/>-->
    <!--</bean>-->

    <!--对象注入-->
    <!--配置UserDao-->
    <!--<bean id="userDao" class="com.kotlin.Dao.UserDao"></bean>-->
    <!--<bean id="userService" class="com.kotlin.Service.UserService">-->
        <!--name为UserService中属性的名字-->
        <!--由于数据类的特殊性，用constructor-arg和property都是可以的-->
        <!--<constructor-arg name="userDao" ref="userDao"/>-->
        <!--<property name="userDao" ref="userDao"/>-->
    <!--</bean>-->

    <!--p名称空间注入-->
    <!--<bean id="student" class="com.kotlin.Bean.User" p:name="26"/>-->

    <!--注入复杂类型属性-->
    <!--<bean id="student" class="com.kotlin.Bean.Student">-->
        <!--&lt;!&ndash;array&ndash;&gt;-->
        <!--<property name="array">-->
            <!--<array>-->
                <!--<value>张龙</value>-->
                <!--<value>赵虎</value>-->
                <!--<value>王朝</value>-->
                <!--<value>马汉</value>-->
            <!--</array>-->
        <!--</property>-->
        <!--&lt;!&ndash;list&ndash;&gt;-->
        <!--<property name="list">-->
            <!--<list>-->
                <!--<value>张三</value>-->
                <!--<value>李四</value>-->
                <!--<value>王二麻子</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--&lt;!&ndash;map&ndash;&gt;-->
        <!--<property name="map">-->
            <!--<map>-->
                <!--<entry key="1" value="a"/>-->
                <!--<entry key="2" value="b"/>-->
                <!--<entry key="3" value="c"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--&lt;!&ndash;properties&ndash;&gt;-->
        <!--<property name="pro">-->
            <!--<props>-->
                <!--<prop key="driverclass">com.mysql.jdbc.Driver</prop>-->
                <!--<prop key="username">root</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--注解扫描-->
    <!--1.到包中扫描类，方法，属性上面的注解-->
    <!--<context:component-scan base-package="com.kotlin"></context:component-scan>-->

    <!--2.只扫描属性上面的注解-->
    <!--<context:annotation-config ></context:annotation-config>-->


    <!--AOP-->

    <!--1.配置对象-->
    <!--<bean id="book" class="javaa.Book"></bean>-->
    <!--<bean id="mybook" class="javaa.MyBook"></bean>-->

    <!--<bean id="user" class="com.kotlin.Bean.User">-->
        <!--<constructor-arg name="name" value="tom"/>-->
        <!--<constructor-arg name="age" value="48"/>-->
    <!--</bean>-->
    <!--<bean id="advice" class="com.kotlin.Bean.Advice">-->
        <!--<constructor-arg name="content" value="fadfa"/>-->
    <!--</bean>-->

    <!--2.配置aop操作-->
    <!--<aop:config>-->
        <!--2.1配置切入点-->
        <!--<aop:pointcut id="pointcut" expression="execution(public String com.kotlin.Bean.User.add(..))"/>-->

        <!--2.2配置切面 将增强用到方法上-->
        <!--<aop:aspect ref="advice">-->
            <!--选择用来增强的方法和需要增强的切入点-->
            <!--<aop:before method="before" pointcut-ref="pointcut"/>-->
            <!--<aop:after-returning method="afterResult" pointcut-ref="pointcut" returning="result"/>-->
            <!--<aop:after method="after" pointcut-ref="pointcut" />-->
            <!--<aop:around method="around" pointcut-ref="pointcut" />-->
            <!--<aop:after-throwing method="exception" pointcut-ref="pointcut" throwing="ex"/>-->

        <!--</aop:aspect>-->
    <!--</aop:config>-->
    
    <!--<aop:config>-->
        <!--<aop:pointcut id="point" expression="execution(public String javaa.Book.add(..))"/>-->
        <!--<aop:aspect ref="mybook">-->
            <!--<aop:after-returning method="after" pointcut-ref="point" returning="obj"/>-->
            <!--<aop:around method="around" pointcut-ref="point"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->

    <!--开启aop自动扫描代理-->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>





    <!--jdbc操作-->

    <!--配置c3p0连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--注入属性值-->
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test"/>
        <property name="user" value="root"/>
        <property name="password" value="gg123456"/>

    </bean>

    <bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--1.配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入DataSource-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--2.配置事务增强-->
    <!--<tx:advice id="txadvice" transaction-manager="transactionManager">-->

        <!--<tx:attributes>-->
            <!--设置进行事务匹配操作的方法的匹配规则-->
            <!--<tx:method name="*Account"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--3.配置切面-->
    <!--<aop:config>-->
        <!--切入点-->
        <!--<aop:pointcut id="pointcut" expression="execution(* com.kotlin.Service.StudentService.*(..))"/>-->
        <!--<aop:advisor advice-ref="txadvice" pointcut-ref="pointcut"/>-->
    <!--</aop:config>-->


    <!--开启事务注解扫描-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>